import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.beryx:badass-jlink-plugin:2.26.0"
        classpath "io.freefair.gradle:lombok-plugin:8.3"
        classpath "org.gradlex:extra-java-module-info:1.4.1"
        classpath group: 'org.jsonschema2pojo', name: 'jsonschema2pojo-gradle-plugin', version: '1.2.1'
        classpath "net.rdrei.android.buildtimetracker:gradle-plugin:0.11.1"
    }
}
apply plugin: "io.freefair.lombok"
apply plugin: 'idea' // optional (to generate IntelliJ IDEA project files)
apply plugin: "java"
apply plugin: "application"
apply plugin: "org.beryx.jlink"
apply plugin: "org.gradlex.extra-java-module-info"
apply plugin: 'jsonschema2pojo'
apply plugin: "build-time-tracker"

group 'nl.jixxed'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
        vendor = JvmVendorSpec.ADOPTIUM
    }
    modularity.inferModulePath = true
}
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
jar {
    manifest {
        attributes 'Name': 'nl/jixxed/eliteodysseymaterials',
                'Implementation-Title': 'Elite Dangerous Odyssey Materials Helper',
                'Implementation-Version': project.version,
                'Codebase': ' *',
                'Permissions': ' all-permissions',
                'Application-Library-Allowable-Codebase': ' *',
                'Caller-Allowable-Codebase': ' *',
                'Trusted-Only': ' false',
                'Trusted-Library': ' false'
    }
}
repositories {
    mavenCentral()
    maven {
        name 'nexus'
        url "https://nexus.jixxed.nl/nexus/content/repositories/releases"
    }
}
application {
    mainModule = "nl.jixxed.eliteodysseymaterials"
    mainClass = "nl.jixxed.eliteodysseymaterials.Main"
    version = project.version
}

if (os.isWindows()) {
    ext { packageType = "msi" }
} else {
    ext { packageType = "deb" }
}

jlink {
    addExtraDependencies("javafx")
    addOptions('--strip-debug', '--compress', '1', '--no-header-files', '--no-man-pages')
    launcher {
        name = 'Elite Dangerous Odyssey Materials Helper'
        jvmArgs = [
                '-Dapp.version=' + project.version,
                '-Xmx1024M',
                '--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls',
                '--add-exports=jdk.naming.dns/com.sun.jndi.dns=java.naming',
                '--add-exports=javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials',
                '--add-exports=javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials'
        ]
        if (os.isWindows()) {
            jvmArgs += [
                    '-Djavafx.cachedir=javafx-cache'
            ]
        }
    }
    jpackage {
        appVersion = project.version
        installerType = project.ext.packageType
        installerOptions = [
                '--description', 'Installer for ED Odyssey Materials Helper',
                '--copyright', 'Copyright 2021 CMDR Jixxed',
                '--name', 'Elite Dangerous Odyssey Materials Helper',
                '--app-version', project.version
        ] as List<String>
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/images/application/rocket.ico']
        }
        if (installerType == 'deb') {
            imageOptions += ['--icon', 'src/main/resources/images/application/rocket.png']
        }
    }
}
def arch = System.getProperty("os.arch")
def platform = 'linux'
if (os.isWindows()) {
    platform = 'win'
} else if (os.isMacOsX()) {
    platform = 'mac'
}
if (arch == "aarch64") {
    platform += "-aarch64"
}
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.10.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.1.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    implementation 'org.leadpony.justify:justify:3.1.0'
    implementation 'org.glassfish:jakarta.json:2.0.1:module'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.15.2'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.15.2'
    implementation group: 'io.reactivex.rxjava3', name: 'rxjava', version: '3.1.7'
    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'ch.qos.logback:logback-core:1.4.11'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation('javax.servlet:javax.servlet-api:4.0.1')
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    implementation 'io.github.pustike:commons-csv:1.7.0'
    implementation 'nl.jixxed:opencv:4.5.3-0'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.3'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'com.zaxxer', name: 'SparseBitSet', version: '1.2'


    implementation('org.jfxtras:jmetro:11.6.16') {
        exclude group: 'org.openjfx'
    }
    implementation("org.openjfx:javafx-base:19+:${platform}")
    implementation("org.openjfx:javafx-controls:19+:${platform}")
    implementation("org.openjfx:javafx-fxml:19+:${platform}")
    implementation("org.openjfx:javafx-graphics:19+:${platform}")
    implementation("org.openjfx:javafx-media:19+:${platform}")
    implementation("org.openjfx:javafx-swing:19+:${platform}")
    implementation('org.controlsfx:controlsfx:11+')
    testImplementation 'de.saxsys:mvvmfx-testing-utils:1.8.0'
    testImplementation("org.openjfx:javafx-swing:19+:${platform}")
    implementation 'com.github.scribejava:scribejava-core:8.3.3'
    implementation 'net.java.dev.jna:jna:5.13.0'
    implementation 'net.java.dev.jna:jna-platform:5.13.0'
    implementation group: 'nl.jixxed.tess4j', name: 'tess4j', version: '5.2.9'
    implementation group: 'nl.jixxed.lept4j', name: 'lept4j', version: '1.16.6'
    implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'
    testImplementation 'io.github.secretx33:path-matching-resource-pattern-resolver:0.1'


}
jpackage {
    if (os.isWindows()) {
        dependsOn test
    }
}
extraJavaModuleInfo {
    module('scribejava-java8-8.3.3.jar', 'scribejava.java8', '8.3.3') {
        exports("com.github.scribejava.java8.base64")
    }
    module('scribejava-core-8.3.3.jar', 'scribejava.core', '8.3.3') {
        exports("com.github.scribejava.core.builder")
        exports("com.github.scribejava.core.builder.api")
        exports("com.github.scribejava.core.oauth")
        exports("com.github.scribejava.core.model")
        exports("com.github.scribejava.core.pkce")
        exports("com.github.scribejava.core.httpclient")
        requires("scribejava.java8")
        requires("com.fasterxml.jackson.core")
        requires("com.fasterxml.jackson.databind")
    }
    module('failureaccess-1.0.1.jar', 'com.google.guava.failureaccess', '1.0.1')
    module('jsr305-3.0.2.jar', 'com.google.code.findbugs.jsr305', '3.0.2')
    module('j2objc-annotations-1.3.jar', 'com.google.j2objc.j2objc.annotations', '1.3')
    module('listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar', 'com.google.guava.listenablefuture', '9999.0-empty-to-avoid-conflict-with-guava')

    module('doc-annotations-0.2.jar', 'eu.lestard', '0.2')
    module('hamcrest-core-1.3.jar', 'org.hamcrest', '1.3')
    automaticModule('path-matching-resource-pattern-resolver-0.1.jar', 'io.github.secretx33')
    automaticModule('opencv-4.5.3-0.jar', 'org.openpnp')
    automaticModule('jna-5.13.0.jar', 'net.java.dev.jna')
    module('tess4j-5.2.9.jar', 'nl.jixxed.tess4j'){
        exports("nl.jixxed.tess4j")
        exports("nl.jixxed.tess4j.util")
        requires("org.slf4j")
        requires("net.java.dev.jna")
        requires("java.desktop")
    }
    automaticModule('lept4j-1.16.6.jar', 'nl.jixxed.lept4j')
    automaticModule('jai-imageio-core-1.4.0.jar', 'com.github.jaiimageio')
    automaticModule('jboss-vfs-3.2.16.Final.jar', 'org.jboss')
    automaticModule('commons-logging-1.2.jar', 'org.apache.commons.logging')
    automaticModule('jboss-logging-3.1.4.GA.jar', 'org.jboss.logging')
    automaticModule('logback-classic-1.4.5.jar', 'ch.qos.logback.classic')
    automaticModule('logback-core-1.4.5.jar', 'ch.qos.logback.core')
    automaticModule('javax.servlet-api-4.0.1.jar', 'javax.servlet')
    automaticModule('poi-5.2.3.jar', 'org.apache.poi.poi')
    module('poi-ooxml-5.2.3.jar', 'org.apache.poi.ooxml', '5.2.3') {
        exports("org.apache.poi.xssf.usermodel")
        requires("commons.math3")
        requires("SparseBitSet")
    }
    automaticModule('commons-math3-3.6.1.jar', 'commons.math3')
    automaticModule('SparseBitSet-1.2.jar', 'SparseBitSet')

}
compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-exports', "javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials",
                '--add-exports', "javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials"

        ]
        classpath = files()
    }
}
run {
//    setArgs(['edomh://wishlist?eyJldmVudCI6Indpc2hsaXN0IiwidmVyc2lvbiI6IjEiLCJ3aXNobGlzdCI6eyJ1dWlkIjoiMGU4OGE4MzEtMGY1ZS00NjczLWEwODItMzk4YTRmMjA5NDU0IiwibmFtZSI6IkRlZmF1bHQgd2lzaGxpc3QiLCJpdGVtcyI6W3sicmVjaXBlTmFtZSI6IktBUk1BXzRfNSIsInZpc2libGUiOnRydWV9LHsicmVjaXBlTmFtZSI6Ik1BTlRJQ09SRV80XzUiLCJ2aXNpYmxlIjp0cnVlfSx7InJlY2lwZU5hbWUiOiJNQUdBWklORV9TSVpFIiwidmlzaWJsZSI6dHJ1ZX0seyJyZWNpcGVOYW1lIjoiS0FSTUFfMV8yIiwidmlzaWJsZSI6dHJ1ZX1dfX0='])
    jvmArgs = ['--add-exports=javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials', '--add-exports=javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials', '--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls', '--add-exports=jdk.naming.dns/com.sun.jndi.dns=java.naming']
    //, '-Xmx1G', '-XX:+UseCompressedOops', '-XX:+PrintGCDetails', '-XX:SoftRefLRUPolicyMSPerMB=100'
}
test {
    useJUnitPlatform {

    }
}
// Each configuration is set to the default value
jsonSchema2Pojo {

    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = Set.of(file("${sourceSets.main.output.resourcesDir}/schemas/"))

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    targetDirectory = file("${project.buildDir}/generated/sources/js2p")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = 'nl.jixxed.eliteodysseymaterials.schemas'

    // Whether to allow 'additional' properties to be supported in classes by adding a map to
    // hold these. This is true by default, meaning that the schema rule 'additionalProperties'
    // controls whether the map is added. Set this to false to globabally disable additional properties.
    includeAdditionalProperties = false

    // Whether to include a javax.annotation.Generated (Java 8 and lower) or
    // javax.annotation.processing.Generated (Java 9+) in on generated types (default true).
    includeGeneratedAnnotation = false

    // Whether to generate builder-style methods of the form withXxx(value) (that return this),
    // alongside the standard, void-return setters.
    generateBuilders = true

    // If set to true, then the gang of four builder pattern will be used to generate builders on
    // generated classes. Note: This property works in collaboration with generateBuilders.
    // If generateBuilders is false then this property will not do anything.
    useInnerClassBuilders = true

    // Whether to use primitives (long, double, boolean) instead of wrapper types where possible
    // when generating bean properties (has the side-effect of making those properties non-null).
    usePrimitives = false

    // The characters that should be considered as word delimiters when creating Java Bean property
    // names from JSON property names. If blank or not set, JSON properties will be considered to
    // contain a single word when creating Java Bean property names.
    propertyWordDelimiters = [] as char[]

    // Whether to use the java type long (or Long) instead of int (or Integer) when representing the
    // JSON Schema type 'integer'.
    useLongIntegers = true

    // Whether to use the java type BigInteger when representing the JSON Schema type 'integer'. Note
    // that this configuration overrides useLongIntegers
    useBigIntegers = true

    // Whether to use the java type double (or Double) instead of float (or Float) when representing
    // the JSON Schema type 'number'.
    useDoubleNumbers = true

    // Whether to use the java type BigDecimal when representing the JSON Schema type 'number'. Note
    // that this configuration overrides useDoubleNumbers
    useBigDecimals = true

    // Whether to include hashCode and equals methods in generated Java types.
    includeHashcodeAndEquals = true

    // Whether to include a toString method in generated Java types.
    includeToString = true

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jsonb (apply annotations from the JSON-B 1 library)
    //  - jsonb2 (apply annotations from the JSON-B 2 library)
    //  - gson (apply annotations from the Gson library)
    //  - moshi1 (apply annotations from the Moshi 1.x library)
    //  - none (apply no annotations at all)
    annotationStyle = 'jackson'

    // A fully qualified class name, referring to a custom annotator class that implements
    // org.jsonschema2pojo.Annotator and will be used in addition to the one chosen
    // by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
    customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    includeJsr303Annotations = false

    // Whether to include JSR-305 annotations, for schema rules like Nullable, NonNull, etc
    includeJsr305Annotations = false

    // The Level of inclusion to set in the generated Java types (for Jackson serializers)
    //inclusionLevel = InclusionLevel.NON_NULL

    // Whether to use the 'title' property of the schema to decide the class name (if not
    // set to true, the filename and property names are used).
    useTitleAsClassname = true

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of JSON data)
    //  - json (documents that represent an example of the kind of JSON data that the generated Java types
    //          will be mapped to)
    //  - yamlschema (JSON schema documents, represented as YAML)
    //  - yaml (documents that represent an example of the kind of YAML (or JSON) data that the generated Java types
    //          will be mapped to)
    sourceType = 'jsonschema'

    // Whether to empty the target directory before generation occurs, to clear out all source files
    // that have been generated previously. <strong>Be warned</strong>, when activated this option
    // will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
    // directory (all files and folders)</strong> before it begins generating sources.
    removeOldOutput = true

    // A class that extends org.jsonschema2pojo.rules.RuleFactory and will be used to
    // create instances of Rules used for code generation.
    //customRuleFactory = com.MyCustomRuleFactory

    // The character encoding that should be used when writing the generated Java source files
    outputEncoding = 'UTF-8'

    // Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
    // date type fields to generated Java types.
    useJodaDates = false

    // Whether to add JsonFormat annotations when using Jackson 2 that cause format "date", "time", and "date-time"
    // fields to be formatted as yyyy-MM-dd, HH:mm:ss.SSS and yyyy-MM-dd'T'HH:mm:ss.SSSZ respectively. To customize these
    // patterns, use customDatePattern, customTimePattern, and customDateTimePattern config options or add these inside a
    // schema to affect an individual field
    formatDateTimes = true
    formatDates = true
    formatTimes = true

    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true

    // Whether to add a prefix to generated classes.
    classNamePrefix = ""

    // Whether to add a suffix to generated classes.
    classNameSuffix = ""

    // An array of strings that should be considered as file extensions and therefore not included in class names.
    fileExtensions = [".v1.0.json",".v2.0.json",".v3.0.json"] as String[]

    // Whether to generate constructors or not.
    includeConstructors = false

    // Whether to include java.beans.ConstructorProperties on generated constructors
    includeConstructorPropertiesAnnotation = false

    // Whether to include only 'required' fields in generated constructors
    constructorsRequiredPropertiesOnly = false

    // Whether to *add* a constructor that includes only 'required' fields, alongside other constructors.
    // This property is irrelevant if constructorsRequiredPropertiesOnly = true
    includeRequiredPropertiesConstructor = false

    // Whether to *add* a constructor that includes all fields, alongside other constructors.
    // This property is irrelevant if constructorsRequiredPropertiesOnly = true
    includeAllPropertiesConstructor = false

    // Include a constructor with the class itself as a parameter, with the expectation that all properties
    // from the originating class will assigned to the new class.
    // This property is irrelevant if constructorsRequiredPropertiesOnly = true
    includeCopyConstructor = false

    // Whether to make the generated types Parcelable for Android
    parcelable = false

    // Whether to make the generated types Serializable
    serializable = false

    // Whether to include getters or to omit these accessor methods and create public fields instead.
    includeGetters = true

    // Whether to include setters or to omit these accessor methods and create public fields instead.
    includeSetters = true

    // Whether to include dynamic getters, setters, and builders or to omit these methods.
    includeDynamicAccessors = false

    // Whether to include dynamic getters or to omit these methods.
    includeDynamicGetters = false

    // Whether to include dynamic setters or to omit these methods.
    includeDynamicSetters = false

    // Whether to include dynamic builders or to omit these methods.
    includeDynamicBuilders = true

    // Whether to use org.joda.time.LocalTime for format: date-time. For full control see dateType
    useJodaLocalDates = false

    // Whether to use org.joda.time.LocalDate for format: date
    useJodaLocalTimes = false

    // What type to use instead of string when adding string properties of format "date" to Java types
    dateType = "java.time.LocalDate"

    // What type to use instead of string when adding string properties of format "date-time" to Java types
    dateTimeType = "java.time.LocalDateTime"

    // What type to use instead of string when adding string properties of format "time" to Java types
    timeType = "java.time.LocalDate"

    // A custom pattern to use when formatting date fields during serialization. Requires support from
    // your JSON binding library.
    customDatePattern = "yyyy-MM-dd"
    //2022-11-30T10:25:27Z
    // A custom pattern to use when formatting date-time fields during serialization. Requires support from
    // your JSON binding library.
    customDateTimePattern = "yyyy-MM-dd'T'HH:mm:ss'Z'"

    // A custom pattern to use when formatting time fields during serialization. Requires support from
    // your JSON binding library.
    customTimePattern = "HH:mm"

    // A map offering full control over which Java type will be used for each JSON Schema 'format' value
    //formatTypeMapping = [...]

    // Which characters to use as 'path fragment delimiters' when trying to resolve a ref
    refFragmentPathDelimiters = "#/."

    // Whether to include json type information; often required to support polymorphic type handling.
    // By default the type information is stored in the @class property, this can be overridden using
    // deserializationClassProperty in the schema
    includeJsonTypeInfoAnnotation = false

    // Whether to use java.util.Optional for getters on properties that are not required
    useOptionalForGetters = true

    // properties to exlude from generated toString
    //toStringExcludes = ["someProperty"]

    // What java source version to target with generated output (1.6, 1.8, 9, 11, etc)
    targetVersion = "17"

    // deprecated, since we no longer use commons-lang for equals, hashCode, toString
    //useCommonsLang3 = false

    // A customer file filter to allow input files to be filtered/ignored
    // fileFilter = new FileFilter() {
    //     @Override
    //     boolean accept(File pathname) {
    //         console.println(pathname.name);
    //         return pathname.name.endsWith("json");
    //     }
    // }

    // A sort order to use when reading input files, one of SourceSortOrder.OS (allow the OS to decide sort
    // order), SourceSortOrder.FILES_FIRST or SourceSortOrder.SUBDIRS_FIRST
    //sourceSortOrder = SourceSortOrder.OS

    // Whether to use annotations from jakarta.validation package instead of javax.validation package
    // when adding JSR-303 annotations to generated Java types
    useJakartaValidation = false
}
buildtimetracker {
    reporters {
        summary {
            ordered false
            threshold 50
            barstyle 'unicode'
        }
    }
}

mainClassName = 'nl.jixxed.eliteodysseymaterials.Main'