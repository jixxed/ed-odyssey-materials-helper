import org.gradle.internal.os.OperatingSystem;

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.beryx:badass-jlink-plugin:3.1.3"
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.2.2'
        classpath "net.rdrei.android.buildtimetracker:gradle-plugin:0.11.1"
        classpath("io.freefair.jsass-java:io.freefair.jsass-java.gradle.plugin:6.5.0.2")
    }
}

plugins {
    id 'java'
    id("io.freefair.jsass-java") version "6.5.0.2"
    id 'io.freefair.lombok' version '8.14.2'
    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'application'
    id 'org.beryx.jlink' version '3.1.3'
    id 'org.gradlex.extra-java-module-info'
    id 'org.jsonschema2pojo' version '1.2.2'
    id 'net.rdrei.android.buildtimetracker' version '0.11.0'
}

//compileSass.configure {
//    options.compilerArgs += ['-Xdoclint:none', '-Xlint:none', '-nowarn']
//}
tasks.register('compileSassDefault', compileSass.getClass()) {
    outputs.upToDateWhen { false }
    group = 'build'
    def skipProvider = providers.gradleProperty("skipSass")
    onlyIf("there is no property skipSass") {
        !skipProvider.present
    }
    source = fileTree('src/main/resources/sass/default') {
        include '**/*.scss'
    }
    destinationDir = file("src/main/resources/css/compiled")
    indent = "  "
    linefeed = "\n";
    omitSourceMapUrl = false
    outputStyle = "NESTED";
    precision = 8
    sourceComments = false
    sourceMapContents = false
    sourceMapEmbed = false
    sourceMapEnabled = false
}

tasks.register('compileSassColorblind', compileSass.getClass()) {
    outputs.upToDateWhen { false }
    group = 'build'
    description = 'Compiles Sass files to CSS'
    source = fileTree('src/main/resources/sass/colorblind') {
        include '**/*.scss'
    }
    destinationDir = file('src/main/resources/css/compiled')
    indent = '  '
    linefeed = '\n'
    omitSourceMapUrl = false
    outputStyle = 'NESTED'
    precision = 8
    sourceComments = false
    sourceMapContents = false
    sourceMapEmbed = false
    sourceMapEnabled = false
}
tasks.register("generateSecrets")  {
    doLast {
        def secretFile = file("src/main/resources/secret.properties")
        secretFile.parentFile.mkdirs()

        secretFile.text = """
            app.version=${project.version ?: 'dev'}
            eddn.software.name=${System.getenv('EDDN_SOFTWARE_NAME') ?: 'missing'}
            api.services.host=${System.getenv('API_SERVICES_HOST') ?: 'localhost'}
            sentry.dsn=${System.getenv("SENTRY_DSN") ?: 'missing'}
            broker.host=${System.getenv("BROKER_HOST") ?: 'localhost'}
            ccid=${System.getenv("CCID") ?: 'aef4566a-2c1b-4d0f-8e3a-5c6f7d8e9a0c'}
        """.stripIndent().stripLeading().stripTrailing()
    }
}


tasks.register('wrapper', Wrapper) {
    gradleVersion = "8.14.3"
}
group = 'nl.jixxed'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
        vendor = JvmVendorSpec.AZUL
    }
    modularity.inferModulePath = true
}
OperatingSystem os = OperatingSystem.current()
jar {
    manifest {
        attributes 'Name': 'nl/jixxed/eliteodysseymaterials',
                'Implementation-Title': 'Elite Dangerous Odyssey Materials Helper',
                'Implementation-Version': project.version,
                'Codebase': ' *',
                'Permissions': ' all-permissions',
                'Application-Library-Allowable-Codebase': ' *',
                'Caller-Allowable-Codebase': ' *',
                'Trusted-Only': ' false',
                'Trusted-Library': ' false'
    }
}
def proprietaryUser = System.getenv('PROPRIETARY_REPO_USER')
def proprietaryPass = System.getenv('PROPRIETARY_REPO_PASS')
def proprietary = (proprietaryUser && proprietaryPass) || isRepoReachable("https://nexus.jixxed.nl/nexus/content/repositories/releases")

def isRepoReachable(String url) {
    try {
        def connection = new URL(url).openConnection()
        connection.setConnectTimeout(2000)
        connection.setReadTimeout(2000)
        connection.requestMethod = 'HEAD'
        connection.connect()
        return connection.responseCode == 200
    } catch (Exception ignored) {
        return false
    }
}
repositories {
    mavenCentral {
    }
    maven {
        name 'repsy'
        url "https://repo.repsy.io/mvn/jixxed/maven/"
    }
    maven { url = 'https://jitpack.io' }
    if (proprietaryUser && proprietaryPass) {
        maven {
            name 'repsy'
            url "https://repo.repsy.io/mvn/jixxed/proprietary/"
            credentials {
                username proprietaryUser
                password proprietaryPass
            }
        }
    }
    if (proprietary) {
        maven {
            name = 'nexus'
            url = "https://nexus.jixxed.nl/nexus/content/repositories/releases"
        }
    }
}
application {
    mainModule = "nl.jixxed.eliteodysseymaterials"
    mainClass = "nl.jixxed.eliteodysseymaterials.Main"
    version = project.version
}
//def javaVersion = JavaVersion.current().majorVersion as int
//def javafxJmods = file("/path/to/javafx-jmods-24")
//def jdkJmods = file("${System.getProperty('java.home')}/jmods")
jlink {
//    jmods = javaVersion >= 24 ? [javafxJmods, jdkJmods] : [jdkJmods, javafxJmods]
    mergedModule {
        excludeProvides servicePattern: 'reactor.blockhound.*'
//        excludeProvides servicePattern: "jakarta.servlet.*"
    }
    jpackage {
        skipInstaller = true
        if (OperatingSystem.current().isLinux()) {
            imageOptions += ['--icon', 'src/main/resources/images/application/rocket.png']
        } else {
            imageOptions += ['--icon', 'src/main/resources/images/application/rocket.ico']
        }
    }
    addExtraDependencies("javafx", "jackson", "log4j", "jdk.accessibility")
    forceMerge("j2objc"/*, "logback"*/)
    if (proprietary) {
//        addExtraDependencies("nl.jixxed.ed.awesome.impl")
//        forceMerge("nl.jixxed.ed.awesome.impl")
        addOptions '--bind-services'
    }
    addOptions('--strip-debug', '--compress', 'zip-0', '--no-header-files', '--no-man-pages')
    launcher {
        name = 'Elite Dangerous Odyssey Materials Helper'
        jvmArgs = [
                '-Dapp.version=' + project.version,
                os.isWindows() ? '-Dlogging.config=log' : '-Dlogging.config=${user.home}/.ed-odyssey-materials-helper/log',
                '-Xmx2048M',
                '--add-exports=java.base/jdk.internal.misc=nl.jixxed.merged.module',
                '--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls',
                '--add-exports=jdk.naming.dns/com.sun.jndi.dns=java.naming',
                '--add-exports=javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials',
                '--add-exports=javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials'
        ]
        if (os.isWindows()) {
            jvmArgs += [
                    '-Djavafx.cachedir=javafx-cache-program'
            ]
        }
    }
}
tasks.register("patchShellScript") {
    dependsOn jpackage
    doLast {
        def launcherScript = file("$buildDir/jpackage/Elite Dangerous Odyssey Materials Helper/lib/runtime/bin/Elite Dangerous Odyssey Materials Helper")
        if (launcherScript.exists()) {
            def text = launcherScript.text
            // Replace the unescaped version with escaped version
            text = text.replace(
                    '-Dlogging.config=${user.home}/.ed-odyssey-materials-helper/log',
                    '-Dlogging.config=\\${user.home}/.ed-odyssey-materials-helper/log'
            )
            launcherScript.text = text
            println "Patched shell launcher for escaped logging.config"
        } else {
            println "Launcher script not found at: ${launcherScript}"
        }
    }
}
tasks.register("jpackageSigned") {
    dependsOn jpackage
    // not signing exe until bug is fixed https://bugs.openjdk.org/browse/JDK-8326447
//    dependsOn jpackageImage
//    finalizedBy signAppExe
}
tasks.register('createSignCert') {
    String base64 = System.getProperty("base64_pfx") ?: ""

    final ByteArrayOutputStream ostr = new ByteArrayOutputStream()
    ostr.withCloseable {
        it << Base64.decoder.decode(base64.getBytes())
    }

    new File("./edomh_codesigning.pfx").withOutputStream { stream ->
        ostr.writeTo(stream)
    }
}
tasks.register('signAppExe') {
    dependsOn createSignCert
    finalizedBy jpackage
    doLast {
        File target = new File("application/build/jpackage/Elite Dangerous Odyssey Materials Helper/Elite Dangerous Odyssey Materials Helper.exe")
        target.setWritable(true)
        println System.getProperty("pfx_password")
        println System.getProperty("pfx_alias")
        jsign(file: 'application/build/jpackage/Elite Dangerous Odyssey Materials Helper/Elite Dangerous Odyssey Materials Helper.exe',
                name: 'Elite Dangerous Odyssey Materials Helper',
                url: 'https://github.com/jixxed/ed-odyssey-materials-helper',
                keystore: 'edomh_codesigning.pfx',
                alias: System.getProperty("pfx_alias") ?: "NO_ALIAS",
                storepass: System.getProperty("pfx_password") ?: "NO_PASSWORD",
                storetype: 'PKCS12',
                tsaurl: 'http://timestamp.sectigo.com')
    }
}
def arch = System.getProperty("os.arch")
def platform = 'linux'
if (os.isWindows()) {
    platform = 'win'
} else if (os.isMacOsX()) {
    platform = 'mac'
}
if (arch == "aarch64") {
    platform += "-aarch64"
}
configurations.all {
    //for leadpony
    exclude group: "org.glassfish", module: "jakarta.json-api"
}
dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.platform:junit-platform-suite-api"
    testImplementation "org.junit.platform:junit-platform-runner"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation 'org.mockito:mockito-inline'
    testImplementation "org.assertj:assertj-core"
    implementation("org.leadpony.justify:justify") {
        exclude group: "jakarta.json", module: "jakarta.json-api"
    }
    implementation "org.eclipse.parsson:jakarta.json"

    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    implementation "io.reactivex.rxjava3:rxjava"
    implementation "org.slf4j:slf4j-api"
    implementation "commons-io:commons-io"
    implementation "ch.qos.logback:logback-core"
    implementation "ch.qos.logback:logback-classic"
    implementation "javax.servlet:javax.servlet-api"
    implementation "com.google.guava:guava"
    implementation "io.github.pustike:commons-csv"
    implementation "nl.jixxed:opencv"
    implementation "org.apache.poi:poi-ooxml"
    implementation "org.apache.commons:commons-math3"
    implementation "org.apache.commons:commons-compress"
    implementation "org.apache.xmlbeans:xmlbeans"
    implementation "com.zaxxer:SparseBitSet"
    implementation "io.sentry:sentry"
    implementation 'de.jensd:fontawesomefx-commons'
    implementation 'de.jensd:fontawesomefx-fontawesome'
//    implementation "io.sentry:sentry-logback"
    implementation "com.google.j2objc:j2objc-annotations:${project.getProperties().version_j2objc_annotations}"

    implementation 'io.github.classgraph:classgraph'

    implementation("org.jfxtras:jmetro") {
        exclude group: "org.openjfx"
    }
    implementation group: "org.openjfx", name: "javafx-base", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-controls", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-fxml", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-graphics", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-media", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-swing", classifier: "${platform}"
    implementation "org.controlsfx:controlsfx"
    testImplementation "de.saxsys:mvvmfx-testing-utils"
    testImplementation "org.openjfx:javafx-swing"
    implementation "com.github.scribejava:scribejava-core"
    implementation "net.java.dev.jna:jna"
    implementation "net.java.dev.jna:jna-platform"
    implementation "nl.jixxed.tess4j:tess4j"
    implementation "nl.jixxed.lept4j:lept4j"
    implementation "com.github.jai-imageio:jai-imageio-core"
    testImplementation "io.github.secretx33:path-matching-resource-pattern-resolver"
    implementation "com.github.wille:oslib"
    implementation 'nl.jixxed.ed.awesome:ed-awesome-api:1.5'

    if (proprietary) {
        implementation 'nl.jixxed.ed.awesome:ed-awesome-impl:1.8'
    }
}
jpackage {

    if (os.isWindows()) {
        dependsOn test
    }
}


extraJavaModuleInfo {
    deriveAutomaticModuleNamesFromFileNames.set(true)
    module("scribejava-java8-${project.getProperties().version_scribejava}.jar", "scribejava.java8", "${project.getProperties().version_scribejava}") {
        exports("com.github.scribejava.java8.base64")
    }
    module("scribejava-core-${project.getProperties().version_scribejava}.jar", "scribejava.core", "${project.getProperties().version_scribejava}") {
        exports("com.github.scribejava.core.builder")
        exports("com.github.scribejava.core.builder.api")
        exports("com.github.scribejava.core.oauth")
        exports("com.github.scribejava.core.model")
        exports("com.github.scribejava.core.pkce")
        exports("com.github.scribejava.core.httpclient")
        requires("scribejava.java8")
        requires("com.fasterxml.jackson.core")
        requires("com.fasterxml.jackson.databind")
    }
//    module('failureaccess-1.0.2.jar', 'com.google.guava.failureaccess', '1.0.2')
    module('jsr305-3.0.2.jar', 'com.google.code.findbugs.jsr305', '3.0.2')
//    automaticModule("j2objc-annotations-${project.getProperties().version_j2objc_annotations}.jar", 'j2objc')
    module("commons-math3-${project.getProperties().version_apache_commons_math3}.jar", 'org.apache.commons.math3') {
        patchRealModule()
        exportAllPackages()
    }
    module('listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar', 'com.google.guava.listenablefuture', '9999.0-empty-to-avoid-conflict-with-guava')

    module('doc-annotations-0.2.jar', 'eu.lestard', '0.2')
    module('hamcrest-core-1.3.jar', 'org.hamcrest', '1.3')
    automaticModule('path-matching-resource-pattern-resolver-0.1.jar', 'io.github.secretx33')
    automaticModule("classgraph-${project.getProperties().version_github_classgraph}.jar", 'io.github.classgraph')
    automaticModule("opencv-${project.getProperties().version_opencv}.jar", "org.openpnp")
    module("tess4j-${project.getProperties().version_tess4j}.jar", "nl.jixxed.tess4j") {
        exports("nl.jixxed.tess4j")
        exports("nl.jixxed.tess4j.util")
        requires("org.slf4j")
        requires("com.sun.jna")
        requires("java.desktop")
    }
    automaticModule("lept4j-${project.getProperties().version_lept4j}.jar", "nl.jixxed.lept4j")
    automaticModule("jai-imageio-core-${project.getProperties().version_jai_imageio}.jar", 'com.github.jaiimageio')
    automaticModule('jboss-vfs-3.2.16.Final.jar', 'org.jboss')
    automaticModule('commons-logging-1.2.jar', 'org.apache.commons.logging')
    automaticModule('jboss-logging-3.1.4.GA.jar', 'org.jboss.logging')
    automaticModule('javax.servlet-api-4.0.1.jar', 'javax.servlet')
    module("poi-${project.getProperties().version_apache_poi}.jar", "org.apache.poi.poi", "${project.getProperties().version_apache_poi}") {
        patchRealModule()
        exportAllPackages()
        requires("org.apache.commons.math3")
        requires("com.zaxxer.sparsebitset")
        requires("org.apache.logging.log4j")
        requires("java.desktop")

    }
    module("poi-ooxml-lite-${project.getProperties().version_apache_poi}.jar", "org.apache.poi.ooxml.schemas", "${project.getProperties().version_apache_poi}") {
        patchRealModule()
        requires("org.apache.poi.poi")
        requires("org.apache.xmlbeans")
        requires("org.apache.logging.log4j")
        requires("java.xml")
        exportAllPackages()
    }
    module("poi-ooxml-${project.getProperties().version_apache_poi}.jar", "org.apache.poi.ooxml", "${project.getProperties().version_apache_poi}") {
        patchRealModule()
        exportAllPackages()
//        exports("org.apache.poi.xssf.usermodel")
        requires("org.apache.logging.log4j")
        requires("org.apache.commons.io")
        requires("org.apache.commons.math3")
        requires("org.apache.commons.compress")
        requires("org.apache.poi.poi")
        requires("org.apache.poi.ooxml.schemas")
        requires("com.zaxxer.sparsebitset")
        requires("org.apache.xmlbeans")
        requires("java.xml")
    }
    automaticModule("mockito-inline-${project.getProperties().version_mockito_inline}.jar", "mockito.inline")


}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-exports', "javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials",
                '--add-exports', "javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials"
        ]
        classpath = files()
    }
}
run {
//    setArgs(['edomh://wishlist?eyJldmVudCI6Indpc2hsaXN0IiwidmVyc2lvbiI6IjEiLCJ3aXNobGlzdCI6eyJ1dWlkIjoiMGU4OGE4MzEtMGY1ZS00NjczLWEwODItMzk4YTRmMjA5NDU0IiwibmFtZSI6IkRlZmF1bHQgd2lzaGxpc3QiLCJpdGVtcyI6W3sicmVjaXBlTmFtZSI6IktBUk1BXzRfNSIsInZpc2libGUiOnRydWV9LHsicmVjaXBlTmFtZSI6Ik1BTlRJQ09SRV80XzUiLCJ2aXNpYmxlIjp0cnVlfSx7InJlY2lwZU5hbWUiOiJNQUdBWklORV9TSVpFIiwidmlzaWJsZSI6dHJ1ZX0seyJyZWNpcGVOYW1lIjoiS0FSTUFfMV8yIiwidmlzaWJsZSI6dHJ1ZX1dfX0='])
    jvmArgs = ['--add-exports=javafx.graphics/com.sun.glass.ui=nl.jixxed.eliteodysseymaterials', '--add-exports=javafx.graphics/com.sun.javafx.tk=nl.jixxed.eliteodysseymaterials', '--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls', '--add-exports=jdk.naming.dns/com.sun.jndi.dns=java.naming']
    //, '-Xmx1G', '-XX:+UseCompressedOops', '-XX:+PrintGCDetails', '-XX:SoftRefLRUPolicyMSPerMB=100'
}
test {
    useJUnitPlatform()
    jvmArgs += [
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('mockito-core') }}"
    ]
}
// Each configuration is set to the default value
jsonSchema2Pojo {
    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = files("${sourceSets.main.output.resourcesDir}/schemas/")

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    targetDirectory = file("${project.buildDir}/generated/sources/js2p")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = 'nl.jixxed.eliteodysseymaterials.schemas'

    // Whether to allow 'additional' properties to be supported in classes by adding a map to
    // hold these. This is true by default, meaning that the schema rule 'additionalProperties'
    // controls whether the map is added. Set this to false to globabally disable additional properties.
    includeAdditionalProperties = false

    // Whether to include a javax.annotation.Generated (Java 8 and lower) or
    // javax.annotation.processing.Generated (Java 9+) in on generated types (default true).
    includeGeneratedAnnotation = false

    // Whether to generate builder-style methods of the form withXxx(value) (that return this),
    // alongside the standard, void-return setters.
    generateBuilders = true

    // If set to true, then the gang of four builder pattern will be used to generate builders on
    // generated classes. Note: This property works in collaboration with generateBuilders.
    // If generateBuilders is false then this property will not do anything.
    useInnerClassBuilders = true

    // Whether to use primitives (long, double, boolean) instead of wrapper types where possible
    // when generating bean properties (has the side-effect of making those properties non-null).
    usePrimitives = false

    // The characters that should be considered as word delimiters when creating Java Bean property
    // names from JSON property names. If blank or not set, JSON properties will be considered to
    // contain a single word when creating Java Bean property names.
    propertyWordDelimiters = [] as char[]

    // Whether to use the java type long (or Long) instead of int (or Integer) when representing the
    // JSON Schema type 'integer'.
    useLongIntegers = true

    // Whether to use the java type BigInteger when representing the JSON Schema type 'integer'. Note
    // that this configuration overrides useLongIntegers
    useBigIntegers = true

    // Whether to use the java type double (or Double) instead of float (or Float) when representing
    // the JSON Schema type 'number'.
    useDoubleNumbers = true

    // Whether to use the java type BigDecimal when representing the JSON Schema type 'number'. Note
    // that this configuration overrides useDoubleNumbers
    useBigDecimals = true

    // Whether to include hashCode and equals methods in generated Java types.
    includeHashcodeAndEquals = true

    // Whether to include a toString method in generated Java types.
    includeToString = true

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jsonb (apply annotations from the JSON-B 1 library)
    //  - jsonb2 (apply annotations from the JSON-B 2 library)
    //  - gson (apply annotations from the Gson library)
    //  - moshi1 (apply annotations from the Moshi 1.x library)
    //  - none (apply no annotations at all)
    annotationStyle = 'jackson'

    // A fully qualified class name, referring to a custom annotator class that implements
    // org.jsonschema2pojo.Annotator and will be used in addition to the one chosen
    // by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
    customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    includeJsr303Annotations = false

    // Whether to include JSR-305 annotations, for schema rules like Nullable, NonNull, etc
    includeJsr305Annotations = false

    // The Level of inclusion to set in the generated Java types (for Jackson serializers)
    //inclusionLevel = InclusionLevel.NON_NULL

    // Whether to use the 'title' property of the schema to decide the class name (if not
    // set to true, the filename and property names are used).
    useTitleAsClassname = true

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of JSON data)
    //  - json (documents that represent an example of the kind of JSON data that the generated Java types
    //          will be mapped to)
    //  - yamlschema (JSON schema documents, represented as YAML)
    //  - yaml (documents that represent an example of the kind of YAML (or JSON) data that the generated Java types
    //          will be mapped to)
    sourceType = 'jsonschema'

    // Whether to empty the target directory before generation occurs, to clear out all source files
    // that have been generated previously. <strong>Be warned</strong>, when activated this option
    // will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
    // directory (all files and folders)</strong> before it begins generating sources.
    removeOldOutput = true

    // A class that extends org.jsonschema2pojo.rules.RuleFactory and will be used to
    // create instances of Rules used for code generation.
    //customRuleFactory = com.MyCustomRuleFactory

    // The character encoding that should be used when writing the generated Java source files
    outputEncoding = 'UTF-8'

    // Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
    // date type fields to generated Java types.
    useJodaDates = false

    // Whether to add JsonFormat annotations when using Jackson 2 that cause format "date", "time", and "date-time"
    // fields to be formatted as yyyy-MM-dd, HH:mm:ss.SSS and yyyy-MM-dd'T'HH:mm:ss.SSSZ respectively. To customize these
    // patterns, use customDatePattern, customTimePattern, and customDateTimePattern config options or add these inside a
    // schema to affect an individual field
    formatDateTimes = true
    formatDates = true
    formatTimes = true

    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true

    // Whether to add a prefix to generated classes.
    classNamePrefix = ""

    // Whether to add a suffix to generated classes.
    classNameSuffix = ""

    // An array of strings that should be considered as file extensions and therefore not included in class names.
    fileExtensions = [".v1.0.json", ".v2.0.json", ".v3.0.json"] as String[]

    // Whether to generate constructors or not.
    includeConstructors = false

    // Whether to include java.beans.ConstructorProperties on generated constructors
    includeConstructorPropertiesAnnotation = false

    // Whether to include only 'required' fields in generated constructors
    constructorsRequiredPropertiesOnly = false

    // Whether to *add* a constructor that includes only 'required' fields, alongside other constructors.
    // This property is irrelevant if constructorsRequiredPropertiesOnly = true
    includeRequiredPropertiesConstructor = false

    // Whether to *add* a constructor that includes all fields, alongside other constructors.
    // This property is irrelevant if constructorsRequiredPropertiesOnly = true
    includeAllPropertiesConstructor = false

    // Include a constructor with the class itself as a parameter, with the expectation that all properties
    // from the originating class will assigned to the new class.
    // This property is irrelevant if constructorsRequiredPropertiesOnly = true
    includeCopyConstructor = false

    // Whether to make the generated types Parcelable for Android
    parcelable = false

    // Whether to make the generated types Serializable
    serializable = false

    // Whether to include getters or to omit these accessor methods and create public fields instead.
    includeGetters = true

    // Whether to include setters or to omit these accessor methods and create public fields instead.
    includeSetters = true

    // Whether to include dynamic getters, setters, and builders or to omit these methods.
    includeDynamicAccessors = false

    // Whether to include dynamic getters or to omit these methods.
    includeDynamicGetters = false

    // Whether to include dynamic setters or to omit these methods.
    includeDynamicSetters = false

    // Whether to include dynamic builders or to omit these methods.
    includeDynamicBuilders = true

    // Whether to use org.joda.time.LocalTime for format: date-time. For full control see dateType
    useJodaLocalDates = false

    // Whether to use org.joda.time.LocalDate for format: date
    useJodaLocalTimes = false

    // What type to use instead of string when adding string properties of format "date" to Java types
    dateType = "java.time.LocalDate"

    // What type to use instead of string when adding string properties of format "date-time" to Java types
    dateTimeType = "java.time.LocalDateTime"

    // What type to use instead of string when adding string properties of format "time" to Java types
    timeType = "java.time.LocalDate"

    // A custom pattern to use when formatting date fields during serialization. Requires support from
    // your JSON binding library.
    customDatePattern = "yyyy-MM-dd"
    //2022-11-30T10:25:27Z
    // A custom pattern to use when formatting date-time fields during serialization. Requires support from
    // your JSON binding library.
    customDateTimePattern = "yyyy-MM-dd'T'HH:mm:ss'Z'"

    // A custom pattern to use when formatting time fields during serialization. Requires support from
    // your JSON binding library.
    customTimePattern = "HH:mm"

    // A map offering full control over which Java type will be used for each JSON Schema 'format' value
    //formatTypeMapping = [...]

    // Which characters to use as 'path fragment delimiters' when trying to resolve a ref
    refFragmentPathDelimiters = "#/."

    // Whether to include json type information; often required to support polymorphic type handling.
    // By default the type information is stored in the @class property, this can be overridden using
    // deserializationClassProperty in the schema
    includeJsonTypeInfoAnnotation = false

    // Whether to use java.util.Optional for getters on properties that are not required
    useOptionalForGetters = true

    // properties to exlude from generated toString
    //toStringExcludes = ["someProperty"]

    // What java source version to target with generated output (1.6, 1.8, 9, 11, etc)
    targetVersion = "17"

    // deprecated, since we no longer use commons-lang for equals, hashCode, toString
    //useCommonsLang3 = false

    // A customer file filter to allow input files to be filtered/ignored
    // fileFilter = new FileFilter() {
    //     @Override
    //     boolean accept(File pathname) {
    //         console.println(pathname.name);
    //         return pathname.name.endsWith("json");
    //     }
    // }

    // A sort order to use when reading input files, one of SourceSortOrder.OS (allow the OS to decide sort
    // order), SourceSortOrder.FILES_FIRST or SourceSortOrder.SUBDIRS_FIRST
    //sourceSortOrder = SourceSortOrder.OS

    // Whether to use annotations from jakarta.validation package instead of javax.validation package
    // when adding JSR-303 annotations to generated Java types
    useJakartaValidation = false
}
//buildtimetracker {
//    reporters {
//        summary {
//            ordered false
//            threshold 50
//            barstyle 'unicode'
//        }
//    }
//}
tasks.jpackageImage.doFirst {
    if (os.isWindows()) {
        ant.attrib(readonly: false) {
            fileset(dir: 'build\\jpackage')
        }
    } else {
        ant.chmod(dir: 'build/jpackage', perm: 'ugo+w')
    }
    delete file('\\build\\jpackage\\').listFiles()
}
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
    jvmArgs += "--enable-native-access=ALL-UNNAMED"
}
tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-preview"
    jvmArgs += "--enable-native-access=ALL-UNNAMED"
    jvmArgs += "--enable-native-access=com.sun.jna"
    jvmArgs += "--enable-native-access=javafx.graphics,javafx.media"
    jvmArgs += "--enable-native-access=org.openpnp"
}
afterEvaluate {
    generateEffectiveLombokConfig.mustRunAfter generateJsonSchema2Pojo
}
//sourceSets.test.java.srcDirs files("${project.buildDir}/generated/sources/js2p").builtBy(generateJsonSchema2Pojo)
//task generateEffectiveLombokConfig(type: SomeTaskType) {
//    // Task configuration here
//}
//tasks.named('generateEffectiveLombokConfig') {
//    dependsOn(tasks.named('generateJsonSchema2Pojo'))
//    // or alternatively use inputs.files or mustRunAfter as shown above.
//}

// Ensure Sass compiles before Java compilation
compileJava.dependsOn compileSassDefault
compileJava.dependsOn compileSassColorblind
tasks.named('compileSass') {
    dependsOn tasks.named('compileSassDefault')
    dependsOn tasks.named('compileSassColorblind')
}