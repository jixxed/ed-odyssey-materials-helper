import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gradlex:extra-java-module-info:1.8"
        classpath("net.jsign:jsign-gradle-plugin:6.0")
    }
}
apply plugin: "org.gradlex.extra-java-module-info"
apply plugin: "java"
apply plugin: "net.jsign"
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
    modularity.inferModulePath = true
}
wrapper {
    gradleVersion "8.7"
}


tasks.register('copyInstaller', Copy) {
    dependsOn ":bootstrap:jpackage"
    from 'bootstrap/build/jpackage/'
    into 'output'
    include('Elite Dangerous Odyssey Materials Helper-' + version + '.msi')
    rename('Elite Dangerous Odyssey Materials Helper-' + version + '.msi', 'Elite.Dangerous.Odyssey.Materials.Helper.Auto.Updater-' + version + '.msi')
}

tasks.register('copyDeb', Copy) {
    from 'bootstrap/build/jpackage/'
    into 'output'
    include('elite-dangerous-odyssey-materials-helper_' + version + '_amd64.deb')
    rename('elite-dangerous-odyssey-materials-helper_' + version + '_amd64.deb', 'elite-dangerous-odyssey-materials-helper-auto-updater_' + version + '.deb')
}

task makePortable(type: Zip) {
    from 'application/build/jpackage/Elite Dangerous Odyssey Materials Helper'
    include '*'
    include '**/*' //to include contents of a folder present inside Reports directory
    archiveFileName = 'Elite.Dangerous.Odyssey.Materials.Helper-' + project.version + '.portable.zip'
    destinationDirectory = file('/output/')
}

task makeLinuxPortable(type: Zip) {
    from 'application/build/jpackage/Elite Dangerous Odyssey Materials Helper'
    include '*'
    include '**/*' //to include contents of a folder present inside Reports directory
    archiveFileName = 'Elite.Dangerous.Odyssey.Materials.Helper-' + project.version + '.portable.linux.zip'
    destinationDirectory  = file('./output/')
}

tasks.register("createRelease") {
    dependsOn subprojects.jpackage
    finalizedBy makePortable, copyInstaller
}

tasks.register("createReleaseSigned") {
    dependsOn subprojects.jpackageSigned
    finalizedBy makePortable, copyInstaller
}

tasks.register("createPortableRelease") {
    dependsOn(":application:jpackage")
    finalizedBy makePortable
}

tasks.register("createReleaseLinux") {
    dependsOn subprojects.jpackage
    finalizedBy makeLinuxPortable, copyDeb
}


OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
def arch = System.getProperty("os.arch")
def platform = 'linux'
if (os.isWindows()) {
    platform = 'win'
} else if (os.isMacOsX()) {
    platform = 'mac'
}
if (arch == "aarch64") {
    platform += "-aarch64"
}
ext {
    version_logback = "1.5.6"
    version_jackson = "2.17.1"
    version_jna = "5.14.0"
    version_junit_jupiter = "5.10.2"
    version_junit_platform = "1.10.2"
    version_javafx = "21.0.1"
    version_controlsfx = "11.2.1"
    version_scribejava = "8.3.3"
    version_sparsebitset = "1.3"
    version_apache_poi = "5.2.5"
    version_apache_commons_math3 = "3.6.1"
    version_apache_commons_io = "2.16.1"
    version_opencv = "4.5.3-0"
    version_lept4j = "1.16.6"
    version_tess4j = "5.2.9"
    version_jai_imageio = "1.4.0"
    version_mockito_inline = "5.2.0"
    version_guava = "33.2.0-jre"
    version_j2objc_annotations = "3.0.0"
}
allprojects {
    plugins.withType(JavaPlugin).whenPluginAdded {
        dependencies {
            constraints {
                implementation "ch.qos.logback:logback-classic:${version_logback}"
                implementation "ch.qos.logback:logback-core:${version_logback}"
                implementation "com.fasterxml.jackson.core:jackson-core:${version_jackson}"
                implementation "com.fasterxml.jackson.core:jackson-databind:${version_jackson}"
                implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${version_jackson}"
                implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${version_jackson}"
                implementation "com.github.jai-imageio:jai-imageio-core:${version_jai_imageio}"
                implementation "com.github.scribejava:scribejava-core:${version_scribejava}"
                implementation "com.google.guava:guava:${version_guava}"
                implementation "com.zaxxer:SparseBitSet:${version_sparsebitset}"
                implementation "com.google.j2objc:j2objc-annotations:${version_j2objc_annotations}"
                implementation "commons-io:commons-io:${version_apache_commons_io}"
                implementation "io.github.pustike:commons-csv:1.7.0"
                implementation "io.reactivex.rxjava3:rxjava:3.1.8"
                implementation "net.java.dev.jna:jna-platform:${version_jna}"
                implementation "net.java.dev.jna:jna:${version_jna}"
                implementation "nl.jixxed.lept4j:lept4j:${version_lept4j}"
                implementation "nl.jixxed.tess4j:tess4j:${version_tess4j}"
                implementation "nl.jixxed:opencv:${version_opencv}"
                implementation "org.apache.commons:commons-math3:${version_apache_commons_math3}"
                implementation "org.apache.poi:poi-ooxml:${version_apache_poi}"
                implementation "org.eclipse.parsson:jakarta.json:1.1.6"
                implementation "org.leadpony.justify:justify:3.1.0"
                implementation "org.slf4j:slf4j-api:2.0.13"
                implementation "org.openjfx:javafx-base:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-controls:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-fxml:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-graphics:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-media:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-swing:${version_javafx}:${platform}"
                implementation "javax.servlet:javax.servlet-api:4.0.1"
                implementation "org.controlsfx:controlsfx:${version_controlsfx}"
                implementation "org.jfxtras:jmetro:11.6.16"
                implementation 'io.github.classgraph:classgraph:4.8.172'

                testImplementation "de.saxsys:mvvmfx-testing-utils:1.8.0"
                testImplementation "io.github.secretx33:path-matching-resource-pattern-resolver:0.1"
                testImplementation "org.assertj:assertj-core:3.25.3"
                testImplementation "org.junit.jupiter:junit-jupiter-api:${version_junit_jupiter}"
                testImplementation "org.junit.jupiter:junit-jupiter-params:${version_junit_jupiter}"
                testImplementation "org.junit.jupiter:junit-jupiter:${version_junit_jupiter}"
                testImplementation "org.junit.platform:junit-platform-runner:${version_junit_platform}"
                testImplementation "org.junit.platform:junit-platform-suite-api:${version_junit_platform}"
                testImplementation "org.mockito:mockito-junit-jupiter:5.11.0"
                testImplementation "org.mockito:mockito-inline:${version_mockito_inline}"
                testImplementation "org.openjfx:javafx-swing:${version_javafx}:${platform}"
                testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${version_junit_jupiter}"
            }
        }
    }}
tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}