import org.gradle.internal.os.OperatingSystem;

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gradlex:extra-java-module-info:1.13.1"
        classpath "net.jsign:jsign-gradle-plugin:7.3"
    }
}
plugins {
    id "org.gradlex.extra-java-module-info" version "1.13.1"
    id "java"
    id "net.jsign" version "7.3"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
        vendor = JvmVendorSpec.AZUL
    }
    modularity.inferModulePath = true
}
wrapper {
    gradleVersion = "9.1.0"
}

tasks.register('copyMsi', Copy) {
    dependsOn(":bootstrap:jpackage")
    from 'bootstrap/build/jpackage/'
    into 'output'
    include('Elite Dangerous Odyssey Materials Helper-' + version + '.msi')
    rename('Elite Dangerous Odyssey Materials Helper-' + version + '.msi', 'Elite.Dangerous.Odyssey.Materials.Helper.Auto.Updater-' + version + '.msi')
}

tasks.register('copyDeb', Copy) {
    dependsOn(":bootstrap:jpackage", "bootstrap:patchShellScript")
    from 'bootstrap/build/jpackage/'
    into 'output'
    include('elite-dangerous-odyssey-materials-helper_' + version + '_amd64.deb')
    rename('elite-dangerous-odyssey-materials-helper_' + version + '_amd64.deb', 'elite-dangerous-odyssey-materials-helper-auto-updater_' + version + '.deb')
}

tasks.register('copyRpm', Copy) {
    dependsOn(":bootstrap:jpackage", "bootstrap:patchShellScript")
    from 'bootstrap/build/jpackage/'
    into 'output'
    include('elite-dangerous-odyssey-materials-helper-' + version + '-1.x86_64.rpm')
    rename('elite-dangerous-odyssey-materials-helper-' + version + '-1.x86_64.rpm', 'elite-dangerous-odyssey-materials-helper-auto-updater_' + version + '.rpm')
}

tasks.register('makePortable', Zip) {
    dependsOn(":application:jpackage")
    from 'application/build/jpackage/Elite Dangerous Odyssey Materials Helper'
    include '*'
    include '**/*' //to include contents of a folder present inside Reports directory
    archiveFileName = 'Elite.Dangerous.Odyssey.Materials.Helper-' + project.version + '.portable.zip'
    destinationDirectory = file('/output/')
    preserveFileTimestamps = true
}

tasks.register('makeLinuxPortable', Zip) {
    dependsOn(":application:jpackage", "application:patchShellScript")
    from 'application/build/jpackage/Elite Dangerous Odyssey Materials Helper'
    include '*'
    include '**/*' //to include contents of a folder present inside Reports directory
    archiveFileName = 'Elite.Dangerous.Odyssey.Materials.Helper-' + project.version + '.portable.linux.zip'
    destinationDirectory = file('./output/')
    preserveFileTimestamps = true
}

tasks.register('makeLinuxAutoUpdaterPortable', Zip) {
    dependsOn(":bootstrap:jpackage", "bootstrap:patchShellScript")
    from 'bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher'
    include '*'
    include '**/*' //to include contents of a folder present inside Reports directory
    archiveFileName = 'Elite.Dangerous.Odyssey.Materials.Helper-' + project.version + '.linux.autoupdater.zip'
    destinationDirectory = file('./output/')
    preserveFileTimestamps = true
}

tasks.register("createRelease") {
    dependsOn subprojects.jpackage
    finalizedBy makePortable, copyMsi
}

tasks.register("createReleaseSigned") {
    dependsOn subprojects.jpackageSigned
    finalizedBy makePortable, copyMsi
}

tasks.register("createPortableRelease") {
    dependsOn(":application:jpackage")
    finalizedBy makePortable
}

tasks.register("createReleaseLinux") {
    dependsOn subprojects.jpackage, subprojects.patchShellScript
    finalizedBy makeLinuxPortable, makeLinuxAutoUpdaterPortable, copyDeb
}

tasks.register("createReleaseLinuxRpm") {
    dependsOn(":bootstrap:jpackage")
    finalizedBy copyRpm
}


OperatingSystem os = OperatingSystem.current()
def arch = System.getProperty("os.arch")
def platform = 'linux'
if (os.isWindows()) {
    platform = 'win'
} else if (os.isMacOsX()) {
    platform = 'mac'
}
if (arch == "aarch64") {
    platform += "-aarch64"
}
ext {
    version_logback = "1.5.19"
    version_jackson = "2.20.0"
    version_jna = "5.18.0"
    version_junit_jupiter = "6.0.0"
    version_junit_platform = "1.14.0"
    version_javafx = "24.0.1"
    version_controlsfx = "11.2.2"
    version_scribejava = "8.3.3"
    version_sparsebitset = "1.3"
    version_apache_poi = "5.4.1"
    version_apache_commons_math3 = "3.6.1"
    version_apache_commons_compress = "1.28.0"
    version_apache_commons_io = "2.20.0"
    version_apache_xmlbeans = "5.3.0"
    version_opencv = "4.5.3-0"
    version_lept4j = "1.16.6"
    version_tess4j = "5.2.9"
    version_jai_imageio = "1.4.0"
    version_mockito_inline = "5.2.0"
    version_guava = "33.5.0-jre"
    version_j2objc_annotations = "3.1"
    version_mockito = "5.20.0"
    version_sentry = "8.23.0"
    version_github_classgraph = "4.8.181"
}
allprojects {
    plugins.withType(JavaPlugin).whenPluginAdded {
        dependencies {
            constraints {
                implementation "ch.qos.logback:logback-classic:${version_logback}"
                implementation "ch.qos.logback:logback-core:${version_logback}"
                implementation "com.fasterxml.jackson.core:jackson-core:${version_jackson}"
                implementation "com.fasterxml.jackson.core:jackson-databind:${version_jackson}"
                implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${version_jackson}"
                implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${version_jackson}"
                implementation "com.github.jai-imageio:jai-imageio-core:${version_jai_imageio}"
                implementation "com.github.scribejava:scribejava-core:${version_scribejava}"
                implementation "com.google.guava:guava:${version_guava}"
                implementation "com.zaxxer:SparseBitSet:${version_sparsebitset}"
                implementation "com.google.j2objc:j2objc-annotations:${version_j2objc_annotations}"
                implementation "commons-io:commons-io:${version_apache_commons_io}"
                implementation "io.github.pustike:commons-csv:1.7.0"
                implementation "io.reactivex.rxjava3:rxjava:3.1.12"
                implementation "net.java.dev.jna:jna-platform:${version_jna}"
                implementation "net.java.dev.jna:jna:${version_jna}"
                implementation "nl.jixxed.lept4j:lept4j:${version_lept4j}"
                implementation "nl.jixxed.tess4j:tess4j:${version_tess4j}"
                implementation "nl.jixxed:opencv:${version_opencv}"
                implementation "org.apache.commons:commons-math3:${version_apache_commons_math3}"
                implementation "org.apache.commons:commons-compress:${version_apache_commons_compress}"
                implementation "org.apache.xmlbeans:xmlbeans:${version_apache_xmlbeans}"
                implementation "org.apache.poi:poi-ooxml:${version_apache_poi}"
                implementation "org.eclipse.parsson:jakarta.json:1.1.7"
                implementation "org.leadpony.justify:justify:3.1.0"
                implementation "org.slf4j:slf4j-api:2.0.17"
                implementation "org.openjfx:javafx-base:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-controls:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-fxml:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-graphics:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-media:${version_javafx}:${platform}"
                implementation "org.openjfx:javafx-swing:${version_javafx}:${platform}"
                implementation "javax.servlet:javax.servlet-api:4.0.1"
                implementation "org.controlsfx:controlsfx:${version_controlsfx}"
                implementation "org.jfxtras:jmetro:11.6.16"
                implementation "io.github.classgraph:classgraph:${version_github_classgraph}"
                implementation 'de.jensd:fontawesomefx-commons:9.1.2'
                implementation 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'

                testImplementation "de.saxsys:mvvmfx-testing-utils:1.8.0"
                testImplementation "io.github.secretx33:path-matching-resource-pattern-resolver:0.1"
                testImplementation "org.assertj:assertj-core:3.27.6"
                testImplementation "org.junit.jupiter:junit-jupiter-api:${version_junit_jupiter}"
                testImplementation "org.junit.jupiter:junit-jupiter-params:${version_junit_jupiter}"
                testImplementation "org.junit.jupiter:junit-jupiter:${version_junit_jupiter}"
                testImplementation "org.junit.platform:junit-platform-runner:${version_junit_platform}"
                testImplementation "org.junit.platform:junit-platform-suite-api:${version_junit_platform}"
                testImplementation "org.mockito:mockito-junit-jupiter:${version_mockito}"
                testImplementation "org.mockito:mockito-inline:${version_mockito_inline}"
                testImplementation "org.openjfx:javafx-swing:${version_javafx}:${platform}"
                testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${version_junit_jupiter}"

                implementation "io.sentry:sentry:${version_sentry}"
                implementation "io.sentry:sentry-logback:${version_sentry}"

                implementation 'org.apache.logging.log4j:log4j-api:2.25.2'

                implementation "com.github.wille:oslib:master-SNAPSHOT"
            }
        }
    }
}
tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}