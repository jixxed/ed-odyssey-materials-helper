import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.beryx:badass-jlink-plugin:3.1.1"
    }
}

apply plugin: "java"
apply plugin: "application"
apply plugin: "org.beryx.jlink"
group 'nl.jixxed'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}
tasks.register('wrapper', Wrapper) {
    gradleVersion "8.10.2"
}

OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;

jar {
    manifest {
        attributes 'Name': 'nl/jixxed/eliteodysseymaterials',
                'Implementation-Title': 'Elite Dangerous Odyssey Materials Helper',
                'Implementation-Version': project.version
    }
}

repositories {
    mavenCentral()
}

application {
    mainModule = "nl.jixxed.bootstrap"
    mainClass = "nl.jixxed.bootstrap.Main"
}
if (os.isWindows()) {
    ext { packageType = ["msi"] }
} else {
    ext { packageType = ["deb"] }
}
jlink {
    addExtraDependencies("javafx")
    addOptions('--strip-debug', '--compress', 'zip-0', '--no-man-pages')
    launcher {
        name = 'Elite Dangerous Odyssey Materials Helper Launcher'
        jvmArgs = [
                '-Dapp.version=' + project.version,
                os.isWindows() ? '-Djavafx.cachedir=javafx-cache' : ''
        ]
        if (os.isWindows()) {
            jvmArgs += [
                    '-Djavafx.cachedir=javafx-cache'
            ]
        }
    }
    jpackage {
        if (project.ext.packageType.contains('msi')) {
            installerType = 'msi'
            imageOptions += ['--icon', 'src/main/resources/images/rocket.ico']
            installerOptions = [
                    '--description', 'Installer for ED Odyssey Materials Helper',
                    '--copyright', 'Copyright 2021 CMDR Jixxed',
                    '--name', 'Elite Dangerous Odyssey Materials Helper',
                    '--app-version', project.version,
                    '--win-upgrade-uuid', '60AAECE0-2E3A-4A25-A662-CABCD8D1CCCE',
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut', '--win-menu-group', 'Odyssey Material Helper'
            ] as List<String>
        }
        if (project.ext.packageType.contains('deb')) {
            installerType = 'deb'
            imageOptions += ['--icon', 'src/main/resources/images/rocket.png']
            installerOptions = [
                    '--resource-dir', 'build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/lib',
                    '--description', 'Installer for ED Odyssey Materials Helper',
                    '--copyright', 'Copyright 2021 CMDR Jixxed',
                    '--name', 'Elite Dangerous Odyssey Materials Helper',
                    '--app-version', project.version,
                    '--linux-menu-group', 'Other',
                    '--linux-shortcut'
            ] as List<String>
        }
        if (project.ext.packageType.contains('rpm')) {
            installerType = 'rpm'
            imageOptions += ['--icon', 'src/main/resources/images/rocket.png']
            installerOptions = [
                    '--resource-dir', 'build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/lib',
                    '--description', 'Installer for ED Odyssey Materials Helper',
                    '--copyright', 'Copyright 2021 CMDR Jixxed',
                    '--name', 'Elite Dangerous Odyssey Materials Helper',
                    '--app-version', project.version,
                    '--linux-menu-group', 'Other',
                    '--linux-shortcut'
            ] as List<String>
        }
    }
}
tasks.register("jpackageSigned") {
    dependsOn jpackageImage
    // not signing exe until bug is fixed https://bugs.openjdk.org/browse/JDK-8326447
    finalizedBy signInstallerMsi
}
tasks.register('createSignCert') {
    doLast {
        String base64 = System.getProperty("base64_pfx") ?: ""

        final ByteArrayOutputStream ostr = new ByteArrayOutputStream()
        ostr.withCloseable {
            it << Base64.decoder.decode(base64.getBytes())
        }

        new File("./edomh_codesigning.pfx").withOutputStream { stream ->
            ostr.writeTo(stream)
        }
    }
}
tasks.register('signInstallerExe') {
    // not signing exe until bug is fixed https://bugs.openjdk.org/browse/JDK-8326447
    dependsOn createSignCert
    finalizedBy signInstallerMsi
    doLast {
        File target = new File("bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/Elite Dangerous Odyssey Materials Helper Launcher.exe")
        target.setWritable(true)
        jsign(file: 'bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/Elite Dangerous Odyssey Materials Helper Launcher.exe',
                name: 'Elite Dangerous Odyssey Materials Helper',
                url: 'https://github.com/jixxed/ed-odyssey-materials-helper',
                keystore: 'edomh_codesigning.pfx',
                alias: System.getProperty("pfx_alias") ?: "NO_ALIAS",
                storepass: System.getProperty("pfx_password") ?: "NO_PASSWORD",
                tsaurl: 'http://timestamp.sectigo.com')
    }
}
tasks.register('signInstallerMsi') {
    dependsOn createSignCert, jpackage

    doLast {
        File target = new File('bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper-' + version + '.msi')
        if(target.exists())
            println "Signing file ${target}"
        jsign(file: 'bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper-' + version + '.msi',
                name: 'Elite Dangerous Odyssey Materials Helper Launcher',
                url: 'https://github.com/jixxed/ed-odyssey-materials-helper',
                keystore: 'edomh_codesigning.pfx',
                alias: System.getProperty("pfx_alias") ?: "NO_ALIAS",
                storepass: System.getProperty("pfx_password") ?: "NO_PASSWORD",
                tsaurl: 'http://timestamp.sectigo.com')
    }
}
def arch = System.getProperty("os.arch")
def platform = 'linux'
if (os.isWindows()) {
    platform = 'win'
} else if (os.isMacOsX()) {
    platform = 'mac'
}
if (arch == "aarch64") {
    platform += "-aarch64"
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'commons-io:commons-io'

    implementation group: "org.openjfx", name: "javafx-base", classifier:"${platform}"
    implementation group: "org.openjfx", name: "javafx-controls", classifier:"${platform}"
    implementation group: "org.openjfx", name: "javafx-fxml", classifier:"${platform}"
    implementation group: "org.openjfx", name: "javafx-graphics", classifier:"${platform}"
}


test {
    useJUnitPlatform()
}
