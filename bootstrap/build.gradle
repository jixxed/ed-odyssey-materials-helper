import org.gradle.internal.os.OperatingSystem;

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.beryx:badass-jlink-plugin:3.1.3"
    }
}

plugins {
    id 'java'
    id 'application'
    id 'io.freefair.lombok' version '8.14.2'
    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'org.beryx.jlink' version '3.1.3'
}

group 'nl.jixxed'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
        vendor = JvmVendorSpec.AZUL
    }
}
tasks.register('wrapper', Wrapper) {
    gradleVersion = "8.14.3"
}

OperatingSystem os = OperatingSystem.current();

jar {
    manifest {
        attributes 'Name': 'nl/jixxed/eliteodysseymaterials',
                'Implementation-Title': 'Elite Dangerous Odyssey Materials Helper',
                'Implementation-Version': project.version
    }
}

repositories {
    mavenCentral()
}

application {
    mainModule = "nl.jixxed.bootstrap"
    mainClass = "nl.jixxed.bootstrap.Main"
}

def packageType = System.getProperty("packageType") ?: 'msi' // default to windows

jlink {
    addExtraDependencies("javafx")
    addOptions('--strip-debug', '--compress', 'zip-0', '--no-man-pages')
    launcher {
        name = 'Elite Dangerous Odyssey Materials Helper Launcher'
        jvmArgs = [
                '-Dapp.version=' + project.version,
                os.isWindows() ? '-Dlogging.config=log' : '-Dlogging.config=${user.home}/.ed-odyssey-materials-helper/log',
                os.isWindows() ? '-Djavafx.cachedir=javafx-cache' : ''
        ]
        if (os.isWindows()) {
            jvmArgs += [
                    '-Djavafx.cachedir=javafx-cache-launcher'
            ]
        }
    }
    jpackage {
        installerType = packageType
        if (packageType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/images/rocket.ico']
            installerOptions = [
                    '--description', 'Installer for ED Odyssey Materials Helper',
                    '--copyright', 'Copyright 2021 CMDR Jixxed',
                    '--name', 'Elite Dangerous Odyssey Materials Helper',
                    '--app-version', project.version,
                    '--win-upgrade-uuid', '60AAECE0-2E3A-4A25-A662-CABCD8D1CCCE',
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut', '--win-menu-group', 'Odyssey Material Helper'
            ] as List<String>
        }
        if (packageType == 'deb') {
            imageOptions += ['--icon', 'src/main/resources/images/rocket.png']
            installerOptions = [
                    '--resource-dir', 'build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/lib',
                    '--description', 'Installer for ED Odyssey Materials Helper',
                    '--copyright', 'Copyright 2021 CMDR Jixxed',
                    '--name', 'Elite Dangerous Odyssey Materials Helper',
                    '--app-version', project.version,
                    '--linux-menu-group', 'Other',
                    '--linux-shortcut'
            ] as List<String>
        }
        if (packageType == 'rpm') {
            imageOptions += ['--icon', 'src/main/resources/images/rocket.png']
            installerOptions = [
                    '--resource-dir', 'build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/lib',
                    '--description', 'Installer for ED Odyssey Materials Helper',
                    '--copyright', 'Copyright 2021 CMDR Jixxed',
                    '--name', 'Elite Dangerous Odyssey Materials Helper',
                    '--app-version', project.version,
                    '--linux-menu-group', 'Other',
                    '--linux-shortcut'
            ] as List<String>
        }
    }
}
tasks.register("patchShellScript") {
    dependsOn jpackage
    doLast {
        def launcherScript = file("$buildDir/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/lib/runtime/bin/Elite Dangerous Odyssey Materials Helper Launcher")
        if (launcherScript.exists()) {
            def text = launcherScript.text
            // Replace the unescaped version with escaped version
            text = text.replace(
                    '-Dlogging.config=${user.home}/.ed-odyssey-materials-helper/log',
                    '-Dlogging.config=\\${user.home}/.ed-odyssey-materials-helper/log'
            )
            launcherScript.text = text
            println "Patched shell launcher for escaped logging.config"
        } else {
            println "Launcher script not found at: ${launcherScript}"
        }
    }
}

tasks.register("jpackageSigned") {
    dependsOn jpackageImage
    // not signing exe until bug is fixed https://bugs.openjdk.org/browse/JDK-8326447
    finalizedBy signInstallerMsi
}

tasks.register('createSignCert') {
    doLast {
        String base64 = System.getProperty("base64_pfx") ?: ""

        final ByteArrayOutputStream ostr = new ByteArrayOutputStream()
        ostr.withCloseable {
            it << Base64.decoder.decode(base64.getBytes())
        }

        new File("./edomh_codesigning.pfx").withOutputStream { stream ->
            ostr.writeTo(stream)
        }
    }
}

tasks.register('signInstallerExe') {
    // not signing exe until bug is fixed https://bugs.openjdk.org/browse/JDK-8326447
    dependsOn createSignCert
    finalizedBy signInstallerMsi
    doLast {
        File target = new File("bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/Elite Dangerous Odyssey Materials Helper Launcher.exe")
        target.setWritable(true)
        jsign(file: 'bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper Launcher/Elite Dangerous Odyssey Materials Helper Launcher.exe',
                name: 'Elite Dangerous Odyssey Materials Helper',
                url: 'https://github.com/jixxed/ed-odyssey-materials-helper',
                keystore: 'edomh_codesigning.pfx',
                alias: System.getProperty("pfx_alias") ?: "NO_ALIAS",
                storepass: System.getProperty("pfx_password") ?: "NO_PASSWORD",
                tsaurl: 'http://timestamp.sectigo.com')
    }
}

tasks.register('signInstallerMsi') {
    dependsOn createSignCert, jpackage

    doLast {
        File target = new File('bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper-' + version + '.msi')
        if (target.exists())
            println "Signing file ${target}"
        jsign(file: 'bootstrap/build/jpackage/Elite Dangerous Odyssey Materials Helper-' + version + '.msi',
                name: 'Elite Dangerous Odyssey Materials Helper Launcher',
                url: 'https://github.com/jixxed/ed-odyssey-materials-helper',
                keystore: 'edomh_codesigning.pfx',
                alias: System.getProperty("pfx_alias") ?: "NO_ALIAS",
                storepass: System.getProperty("pfx_password") ?: "NO_PASSWORD",
                tsaurl: 'http://timestamp.sectigo.com')
    }
}
def arch = System.getProperty("os.arch")
def platform = 'linux'
if (os.isWindows()) {
    platform = 'win'
} else if (os.isMacOsX()) {
    platform = 'mac'
}
if (arch == "aarch64") {
    platform += "-aarch64"
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'commons-io:commons-io'
    implementation "net.java.dev.jna:jna"
    implementation "net.java.dev.jna:jna-platform"
    implementation "ch.qos.logback:logback-core"
    implementation "ch.qos.logback:logback-classic"
    implementation "org.slf4j:slf4j-api"

    implementation group: "org.openjfx", name: "javafx-base", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-controls", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-fxml", classifier: "${platform}"
    implementation group: "org.openjfx", name: "javafx-graphics", classifier: "${platform}"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-native-access=com.sun.jna"
}

test {
    useJUnitPlatform()
}
